import { BeforeCreate, BeforeUpdate, BelongsTo, Column, CreatedAt, DataType, ForeignKey, HasOne, Index, Model, PrimaryKey, Table, UpdatedAt } from "sequelize-typescript";
import { User } from "../../../user/v1/models";
import { Plan } from "./Plan";
import { Optional } from "sequelize";

interface SubscriptionAttributes {
    id: string;
    userId: string;
    planId?: number; 
    startDate: Date;
    endDate: Date;
    isTrial: boolean;
    status: 'active' | 'cancelled' | 'paused' | 'past_due' | 'trial';
    createdAt: Date;
    updatedAt: Date;
}

// Define which attributes are optional when creating a new instance
type SubscriptionCreationAttributes = Optional<SubscriptionAttributes, 'id' | 'createdAt' | 'updatedAt' | 'planId'>; // 'id' is often autogenerated by UUIDV4, and timestamps are managed by Sequelize

@Table({
    underscored: true,
    tableName: "subscriptions",
    modelName: "Subscription",
    timestamps: true  
})
export class Subscription extends Model<SubscriptionAttributes, SubscriptionCreationAttributes> {
    @PrimaryKey
    @Column({
        type: DataType.UUID,
        defaultValue: DataType.UUIDV4 
    })
    id!: string;

    @Index
    @ForeignKey(() => User)
    @Column({
        type: DataType.UUID,
    })
    userId!: string;

    @ForeignKey(() => Plan)
    @Column({
        type: DataType.INTEGER,
    })
    planId?: number;

    @Column({
        type: DataType.DATE,
    })
    startDate!: Date;

    @Column({
        type: DataType.DATE,
    })
    endDate!: Date;

    @Column({
        type: DataType.BOOLEAN,
        defaultValue: false 
    })
    isTrial!: boolean;

    @Column({
        type: DataType.ENUM,
        values: ['active', 'cancelled', 'paused', 'past_due', 'trial']
    })
    status!: string;

    @CreatedAt
    createdAt!: Date; 

    @UpdatedAt
    updatedAt!: Date; 

    @BelongsTo(() => User)
    user?: User;

    @HasOne(() => Plan)
    plan?: Plan

    @BeforeCreate
    @BeforeUpdate
    static validateSubscription(instance: Subscription) {
        if (instance.isTrial) {
            if (instance.planId !== null) {
                throw new Error("PlanId must be null for trial subscriptions.");
            }
        } else {
            if (instance.planId === null) {
                throw new Error("PlanId must be present for non-trial subscriptions.");
            }
        }
    }
}
